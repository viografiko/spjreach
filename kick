
print("=== HOOKING BALLNETWORKING & VOTEKICK REMOTES ===")


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RemoteHandler = require(ReplicatedStorage.Modules.RemoteHandler)
local remoteList = RemoteHandler.GetRemotes()
local votekick = remoteList[6]


local BallNetworking = RemoteHandler.BallNetworking()
print("BallNetworking remote found:", BallNetworking)
print("Remote name:", BallNetworking.Name)
print("Votekick remote found:", votekick)
print("Votekick name:", votekick.Name)


if hookmetamethod then
    print("Using hookmetamethod...")
    
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    
    setreadonly(mt, false)
    
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        local args = {...}
        

        if method == "FireServer" and self == BallNetworking then
            local action = args[1]
            

            local blockedActions = {
                "Modify_Remotes",
                "High_WalkSpeed", 
                "Exploiting_Ball",
                "Script_Executer",
                "RemoteExploit",
                "Shop_Exploit",
                "No_Clip",
                "Instances",
                "Deleting",
                "Auto_Hit",
                "Auto_Catch_Suspect",
                "Enlarged_Hitbox"
            }
            
            for _, blockedAction in pairs(blockedActions) do
                if action == blockedAction then
                    print("ðŸš« BLOCKED anti-cheat call:", action)
                    return 
                end
            end
            
            print("âœ… Allowing BallNetworking call:", action)
        end
        
   
        if method == "FireServer" and self == votekick then
            print("ðŸš« BLOCKED Votekick call!")
            print("ðŸ“‹ Votekick Arguments:")
            for i, arg in pairs(args) do
                print("  [" .. i .. "]:", tostring(arg), "(" .. type(arg) .. ")")
            end
            return 
        end
        
        
        if method == "InvokeServer" and self == votekick then
            print("ðŸš« BLOCKED Votekick invoke!")
            print("ðŸ“‹ Votekick Arguments:")
            for i, arg in pairs(args) do
                print("  [" .. i .. "]:", tostring(arg), "(" .. type(arg) .. ")")
            end
            return 
        end
        
        return oldNamecall(self, ...)
    end)
    
    setreadonly(mt, true)
    print("âœ… Successfully hooked BallNetworking and Votekick with hookmetamethod")
else
    warn("hookmetamethod not available in this executor")
end


print("\n=== TESTING HOOKS ===")
print("Attempting to call Modify_Remotes...")




print("Hook test completed!")

print("\n=== BYPASS COMPLETE ===")

print("The anti-cheat calls will be blocked automatically.")
print("All votekick attempts will be blocked and logged!")
